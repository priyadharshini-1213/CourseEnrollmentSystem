package app;

import java.util.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * CourseEnrollmentSystem.java
 * Single-file console application for the assignment.
 *
 * Classes included:
 * - Instructor
 * - Course
 * - Student
 * - PremiumStudent
 * - Enrollment
 * - Payment
 * - Receipt
 * - CourseEnrollmentSystem (contains main)
 *
 * Encapsulation, inheritance (PremiumStudent extends Student),
 * aggregation (Course has Instructor), and a menu-driven console are implemented.
 */
public class CourseEnrollmentSystem {

    // === Main program data stores ===
    private final Map<Integer, Course> courses = new HashMap<>();
    private final Map<Integer, Student> students = new HashMap<>();
    private final Map<Integer, Enrollment> enrollments = new HashMap<>();
    private final Map<Integer, Receipt> receipts = new HashMap<>();

    // ID counters
    private int courseIdCounter = 1;
    private int instructorIdCounter = 1;
    private int studentIdCounter = 1;
    private int enrollmentIdCounter = 1;
    private int paymentIdCounter = 1;
    private int receiptIdCounter = 1;

    private final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        CourseEnrollmentSystem app = new CourseEnrollmentSystem();
        app.seedDemoData(); // optional demo data
        app.runMenu();
    }

    private void runMenu() {
        while (true) {
            System.out.println("\n===== Online Course Enrollment System =====");
            System.out.println("1. Add Course");
            System.out.println("2. Add Student");
            System.out.println("3. Enroll in Course");
            System.out.println("4. Make Payment");
            System.out.println("5. Display Courses");
            System.out.println("6. Display Enrollments");
            System.out.println("7. Display Receipts");
            System.out.println("8. Exit");
            System.out.print("Choose an option: ");
            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1": addCourse(); break;
                case "2": addStudent(); break;
                case "3": enrollInCourse(); break;
                case "4": makePayment(); break;
                case "5": displayCourses(); break;
                case "6": displayEnrollments(); break;
                case "7": displayReceipts(); break;
                case "8": System.out.println("Goodbye!"); return;
                default: System.out.println("Invalid option, try again."); break;
            }
        }
    }

    // ---------- Menu operations ----------

    private void addCourse() {
        System.out.print("Course title: ");
        String title = scanner.nextLine().trim();
        System.out.print("Course fee (numeric): ");
        double fee = readDouble();
        System.out.print("Capacity (integer): ");
        int capacity = readInt();

        System.out.print("Instructor name: ");
        String iname = scanner.nextLine().trim();
        System.out.print("Instructor email: ");
        String iemail = scanner.nextLine().trim();
        Instructor instr = new Instructor(instructorIdCounter++, iname, iemail);

        Course c = new Course(courseIdCounter++, title, fee, capacity, instr);
        courses.put(c.getCourseId(), c);
        System.out.println("Added course: " + c);
    }

    private void addStudent() {
        System.out.print("Student name: ");
        String name = scanner.nextLine().trim();
        System.out.print("Student email: ");
        String email = scanner.nextLine().trim();
        System.out.print("Is this a premium student? (y/n): ");
        String yn = scanner.nextLine().trim().toLowerCase();
        Student s;
        if (yn.startsWith("y")) {
            System.out.print("Enter discount rate (e.g., 0.10 for 10%): ");
            double dr = readDouble();
            System.out.print("Grant extra access? (y/n): ");
            String ex = scanner.nextLine().trim().toLowerCase();
            boolean extra = ex.startsWith("y");
            s = new PremiumStudent(studentIdCounter++, name, email, dr, extra);
        } else {
            s = new Student(studentIdCounter++, name, email);
        }
        students.put(s.getStudentId(), s);
        System.out.println("Added student: " + s);
    }

    private void enrollInCourse() {
        if (courses.isEmpty()) {
            System.out.println("No courses available. Add a course first.");
            return;
        }
        if (students.isEmpty()) {
            System.out.println("No students available. Add a student first.");
            return;
        }
        displayCourses();
        System.out.print("Enter Course ID to enroll in: ");
        int cId = readInt();
        Course c = courses.get(cId);
        if (c == null) {
            System.out.println("Invalid Course ID.");
            return;
        }
        if (c.getCapacity() <= 0) {
            System.out.println("Course is full. Cannot enroll.");
            return;
        }

        System.out.print("Enter Student ID: ");
        int sId = readInt();
        Student s = students.get(sId);
        if (s == null) {
            System.out.println("Invalid Student ID.");
            return;
        }

        // create pending enrollment
        Enrollment e = new Enrollment(enrollmentIdCounter++, s, c, false);
        enrollments.put(e.getEnrollmentId(), e);
        System.out.println("Enrollment created with ID: " + e.getEnrollmentId() + " (pending payment).");

        System.out.print("Would you like to pay now? (y/n): ");
        String payNow = scanner.nextLine().trim().toLowerCase();
        if (payNow.startsWith("y")) {
            // process payment immediately
            processPaymentForEnrollment(e);
        } else {
            System.out.println("Enrollment is pending. Use 'Make Payment' from menu to confirm later.");
        }
    }

    private void makePayment() {
        if (enrollments.isEmpty()) {
            System.out.println("No enrollments exist.");
            return;
        }
        displayEnrollmentsShort();
        System.out.print("Enter Enrollment ID to pay for: ");
        int eid = readInt();
        Enrollment e = enrollments.get(eid);
        if (e == null) {
            System.out.println("Invalid Enrollment ID.");
            return;
        }
        if (e.isConfirmed()) {
            System.out.println("Enrollment already confirmed (payment done).");
            return;
        }
        processPaymentForEnrollment(e);
    }

    private void processPaymentForEnrollment(Enrollment e) {
        Course c = e.getCourse();
        Student s = e.getStudent();
        double originalFee = c.getFee();
        double finalFee = originalFee;

        if (s instanceof PremiumStudent) {
            PremiumStudent ps = (PremiumStudent) s;
            double discount = ps.getDiscountRate();
            finalFee = originalFee * (1 - discount);
            System.out.printf("Premium student discount applied: %.2f%% -> Final fee: %.2f\n", discount * 100, finalFee);
            if (ps.hasExtraAccess()) {
                System.out.println("Note: Premium student has access to extra materials.");
            }
        } else {
            System.out.printf("Standard student. Fee: %.2f\n", finalFee);
        }

        System.out.print("Enter payment method (e.g. Card/Cash/UPI): ");
        String method = scanner.nextLine().trim();
        // In a real system we'd validate payment details; here we simulate success.
        Payment p = new Payment(paymentIdCounter++, finalFee, method, LocalDateTime.now());
        // create receipt
        Receipt r = new Receipt(receiptIdCounter++, s, c, finalFee, LocalDateTime.now());
        receipts.put(r.getReceiptId(), r);

        // mark enrollment confirmed and decrement course capacity
        e.setConfirmed(true);
        c.decrementCapacity();

        System.out.println("Payment successful. Enrollment confirmed.");
        System.out.println("=== Receipt ===");
        System.out.println(r);
        System.out.println("Remaining capacity for course '" + c.getTitle() + "': " + c.getCapacity());
    }

    private void displayCourses() {
        if (courses.isEmpty()) {
            System.out.println("No courses to display.");
            return;
        }
        System.out.println("\nAvailable Courses:");
        System.out.println(String.format("%-6s %-25s %-8s %-8s %-20s", "ID", "Title", "Fee", "Capacity", "Instructor"));
        for (Course c : courses.values()) {
            System.out.println(String.format("%-6d %-25s %-8.2f %-8d %-20s",
                    c.getCourseId(), c.getTitle(), c.getFee(), c.getCapacity(), c.getInstructor().getName()));
        }
    }

    private void displayEnrollments() {
        if (enrollments.isEmpty()) {
            System.out.println("No enrollments.");
            return;
        }
        System.out.println("\nEnrollments:");
        System.out.println(String.format("%-6s %-15s %-20s %-12s", "EID", "Student", "Course", "Status"));
        for (Enrollment e : enrollments.values()) {
            System.out.println(String.format("%-6d %-15s %-20s %-12s",
                    e.getEnrollmentId(),
                    e.getStudent().getName(),
                    e.getCourse().getTitle(),
                    e.isConfirmed() ? "Confirmed" : "Pending"));
        }
    }

    private void displayEnrollmentsShort() {
        System.out.println("Pending enrollments (ID - Student - Course - Status):");
        for (Enrollment e : enrollments.values()) {
            System.out.println(e.getEnrollmentId() + " - " + e.getStudent().getName() + " - " + e.getCourse().getTitle() + " - " + (e.isConfirmed() ? "Confirmed" : "Pending"));
        }
    }

    private void displayReceipts() {
        if (receipts.isEmpty()) {
            System.out.println("No receipts yet.");
            return;
        }
        System.out.println("\nReceipts:");
        for (Receipt r : receipts.values()) {
            System.out.println(r);
        }
    }

    // ---------- Utility / demo seeding ----------
    private void seedDemoData() {
        // Optional: add one course and one premium student for quick demo
        Instructor inst = new Instructor(instructorIdCounter++, "Dr. A. Singh", "asingh@example.com");
        Course c1 = new Course(courseIdCounter++, "Java Programming", 1500.00, 3, inst);
        courses.put(c1.getCourseId(), c1);

        Student s1 = new Student(studentIdCounter++, "Priya", "priya@example.com");
        students.put(s1.getStudentId(), s1);

        Student s2 = new PremiumStudent(studentIdCounter++, "Ravi", "ravi@example.com", 0.15, true);
        students.put(s2.getStudentId(), s2);

        System.out.println("Demo data seeded (1 course, 2 students). IDs shown when listing.");
    }

    // ---------- Input helpers ----------
    private int readInt() {
        while (true) {
            String line = scanner.nextLine().trim();
            try {
                return Integer.parseInt(line);
            } catch (NumberFormatException ex) {
                System.out.print("Please enter a valid integer: ");
            }
        }
    }

    private double readDouble() {
        while (true) {
            String line = scanner.nextLine().trim();
            try {
                return Double.parseDouble(line);
            } catch (NumberFormatException ex) {
                System.out.print("Please enter a valid number: ");
            }
        }
    }

    // ========== Domain classes below ==========

    // Instructor
    static class Instructor {
        private final int instructorId;
        private String name;
        private String email;

        public Instructor(int id, String name, String email) {
            this.instructorId = id;
            this.name = name;
            this.email = email;
        }
        public int getInstructorId() { return instructorId; }
        public String getName() { return name; }
        public String getEmail() { return email; }
        @Override
        public String toString() {
            return String.format("Instructor[%d:%s]", instructorId, name);
        }
    }

    // Course (aggregation of Instructor)
    static class Course {
        private final int courseId;
        private String title;
        private double fee;
        private int capacity;
        private Instructor instructor;

        public Course(int courseId, String title, double fee, int capacity, Instructor instructor) {
            this.courseId = courseId;
            this.title = title;
            this.fee = fee;
            this.capacity = capacity;
            this.instructor = instructor;
        }
        public int getCourseId() { return courseId; }
        public String getTitle() { return title; }
        public double getFee() { return fee; }
        public int getCapacity() { return capacity; }
        public Instructor getInstructor() { return instructor; }

        public void setTitle(String t) { this.title = t; }
        public void setFee(double f) { this.fee = f; }
        public void setCapacity(int cap) { this.capacity = cap; }
        public void setInstructor(Instructor instr) { this.instructor = instr; }

        public void decrementCapacity() {
            if (capacity > 0) capacity--;
        }

        @Override
        public String toString() {
            return String.format("Course[%d:%s] Fee:%.2f Cap:%d Instructor:%s",
                    courseId, title, fee, capacity, instructor.getName());
        }
    }

    // Student
    static class Student {
        private final int studentId;
        private String name;
        private String email;

        public Student(int id, String name, String email) {
            this.studentId = id;
            this.name = name;
            this.email = email;
        }
        public int getStudentId() { return studentId; }
        public String getName() { return name; }
        public String getEmail() { return email; }

        public void setName(String name) { this.name = name; }
        public void setEmail(String email) { this.email = email; }

        @Override
        public String toString() {
            return String.format("Student[%d:%s]", studentId, name);
        }
    }

    // PremiumStudent inherits Student
    static class PremiumStudent extends Student {
        private double discountRate; // 0.10 = 10%
        private boolean extraAccess;

        public PremiumStudent(int id, String name, String email, double discountRate, boolean extraAccess) {
            super(id, name, email);
            this.discountRate = discountRate;
            this.extraAccess = extraAccess;
        }
        public double getDiscountRate() { return discountRate; }
        public boolean hasExtraAccess() { return extraAccess; }
        public void setDiscountRate(double dr) { this.discountRate = dr; }
        public void setExtraAccess(boolean ex) { this.extraAccess = ex; }

        @Override
        public String toString() {
            return String.format("PremiumStudent[%d:%s, discount=%.2f%%, extra=%b]",
                    getStudentId(), getName(), discountRate * 100, extraAccess);
        }
    }

    // Enrollment (aggregation: links Student and Course)
    static class Enrollment {
        private final int enrollmentId;
        private final Student student;
        private final Course course;
        private boolean isConfirmed; // confirmed only after payment

        public Enrollment(int id, Student student, Course course, boolean confirmed) {
            this.enrollmentId = id;
            this.student = student;
            this.course = course;
            this.isConfirmed = confirmed;
        }
        public int getEnrollmentId() { return enrollmentId; }
        public Student getStudent() { return student; }
        public Course getCourse() { return course; }
        public boolean isConfirmed() { return isConfirmed; }
        public void setConfirmed(boolean c) { isConfirmed = c; }
    }

    // Payment (simple representation)
    static class Payment {
        private final int paymentId;
        private final double amount;
        private final String method;
        private final LocalDateTime date;

        public Payment(int id, double amount, String method, LocalDateTime date) {
            this.paymentId = id;
            this.amount = amount;
            this.method = method;
            this.date = date;
        }

        public int getPaymentId() { return paymentId; }
        public double getAmount() { return amount; }
        public String getMethod() { return method; }
        public LocalDateTime getDate() { return date; }
    }

    // Receipt links student & course
    static class Receipt {
        private final int receiptId;
        private final Student student;
        private final Course course;
        private final double amountPaid;
        private final LocalDateTime date;

        private static final DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");

        public Receipt(int id, Student student, Course course, double amountPaid, LocalDateTime date) {
            this.receiptId = id;
            this.student = student;
            this.course = course;
            this.amountPaid = amountPaid;
            this.date = date;
        }

        public int getReceiptId() { return receiptId; }
        public Student getStudent() { return student; }
        public Course getCourse() { return course; }
        public double getAmountPaid() { return amountPaid; }
        public LocalDateTime getDate() { return date; }

        @Override
        public String toString() {
            return String.format("Receipt[%d] Date:%s Student:%s Course:%s Amount: %.2f",
                    receiptId, date.format(fmt), student.getName(), course.getTitle(), amountPaid);
        }
    }
}

